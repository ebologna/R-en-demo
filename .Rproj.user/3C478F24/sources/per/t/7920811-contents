---
title: "El paquete ggplot2"
author: "Eduardo Bologna"
date: "17/3/2020"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
```

# El paquete ggplot  

## La lógica

La construcción de los gráficos en ggplot se hace por medio de capas que se van agregando. Las capas tienen cinco componentes:  

- Los datos, que es la base de donde provienen la variables que se van a graficar. Si más tarde se grafica lo mismo para otra base, solo se debe cambiar ese origen, lo mismo si la base se modifica.  
- Un conjunto de mapeos estéticos (*aes*), que describen el modo en que las variables de la base van a ser representadas en las propiedades estéticas de la capa.  
- El *geom*, que describe la figura geométrica que se va a usar para dibujar la capa.  
- La transformación estadística (*stat*) que opera sobre los datos originales para sintetizarlos de modo que se los pueda representar.  
- Los  ajustes de posición

Los gráficos generados con este paquete pueden exportarse con formato gráfico o como pdf.

Para poder usarlo, se lo instala

```{r eval=FALSE}
install.packages("ggplot2")
```

 y se carga en la sesión
```{r}
library(ggplot2)
```

## Aplicaciones
La primera instrucción para crear un gráfico es ggplot(). Esta instrucción puede tener el origen de los datos y algún mapeo estético; pero también puede quedar en blanco y ubicar esa información en las capas siguientes. Si se ubican los datos en esa primera instrucción, todas las capas usarán esos datos, lo mismo para el mapeo estético, alternativamente, cada capa puede especificarlo.

## Una variable  

### Cuantitativa

#### Ingresos salariales (PP08D1)  

Se define la base del gráfico, que indica de dónde provienen los datos:
```{r}
ggplot(asalariados.con.ingreso.y.horas.cordoba)
```

Que solo muestra la capa base:

Se agrega una capa con un histograma:
```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_histogram(aes(PP08D1))
```

El mismo resultado se logra ubicando la estética en la primera instrucción:
```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba, aes(PP08D1))+
  geom_histogram()
```

O poniendo todo en la capa del histograma
```{r}
ggplot()+
  geom_histogram(
    data=asalariados.con.ingreso.y.horas.cordoba, aes(PP08D1))
```

Solo que así debemos indicar que  `asalariados.con.ingreso.y.horas.cordoba` son los datos.  
La información que vaya en la intrucción ggplot() será válida para todas las capas que se agreguen, la que se incluya en una capa solo se toma para esa capa.  

Se lo puede pintar de verde, con contornos azules:
```{r}
ggplot(asalariados.con.ingreso.y.horas.cordoba)+geom_histogram(aes(PP08D1), fill="green", col="blue")
```

- `fill` es para el relleno de las barras
- `col` es para el  contorno

En ese ejemplo, los colores están **fijados** a los valores constantes "verde" o "azul". Pero se lo puede **mapear** a los valores de una variable, por ejemplo `sexo`:
```{r}
p1+geom_histogram(aes(PP08D1, fill=sexo), col="blue")
```

Los contornos están **fijados**, pero el relleno está **mapeado**.

**Mapear** es vincular valores de una variable a atributos estéticos del gráfico, como el color, la forma, o el tamaño, según qué gráfico sea. 
**Fijar** es establecer una atributo en un valor predeterminado para todo el gráfico. Las expresiones `size=3` o `fill="red"` fijan el tamaño en el valor 3 o el color en rojo, sin tener en cuenta alguna variable.  

Para mapear, la instrucción debe ir dentro de la estética (aes), mientras que para fijar, va fuera y entre comillas.

Si se trata de dos variables cuantitativas, como las horas y los ingresos, la capa para el diagrama de dispersión se llama `geom_point` y en la estética deben indicarse las dos variables en el orden $x$, $y$:
```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1))
```

El mapeo de la variable  `sexo` al color de los puntos, se pide dentro de la estética:

```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1, col=sexo))
```

En lugar del color se puede elegir la forma de los puntos:


```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1, shape=sexo))
```


O ambos atributos gráficos a la misma variable

```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1, col=sexo, shape=sexo))
```

VER COMO SE ILUSTRA ESTO MEJOR
El tamaño de los  puntos puede mapearse a otra variable cuantitativa así se dibujan puntos cuyo tamaño es proporcional a los valores de la variable edad (CH06).
```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1, col=sexo, size=CH06))
```

Una opción para comparar grupos es la capa `facet_grid` que puede agregarse a cualquier tipo de gráfico. El comando tiene dos argumentos que corresponden a dos variables de clase `factor`, que se separaran con `~` (alt+126 en windows) que van a separar el gráfico pedido en tantas filas y columnas como categorías tengan esas dos variables. Puede usarse solo una variable, reemplazando con un punto la posición de la otra. Por ejemplo para hacer un diagrama de dispersión de los ingresos salariales según las horas trabajadas para varones y otro para mujeres uno al lado del otro: 

```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1))+
  facet_grid(.~sexo)
```
Para que estén uno encima del otro, la variable va en el lugar de las filas

```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1))+
  facet_grid(sexo~.)
```

Otra variable a mapear en esta capa puede ser el hecho de tener una o más ocupaciones. Dado que no se ha usado antes esa variable, la ajustaremos en su nombre y categorías.
```{r}
asalariados.con.ingreso.y.horas.cordoba$cantidad.ocupaciones<-
  as.factor(asalariados.con.ingreso.y.horas.cordoba$PP03I)
levels(asalariados.con.ingreso.y.horas.cordoba$cantidad.ocupaciones)<-
  c("una ocupación", "más de una ocupación")
```


```{r}
ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1))+
  facet_grid(cantidad.ocupaciones~sexo)
```

 Para no repetir las instrucciones que generan las primera capas del gráfico (aunque se lo haga copiando y pegando), vamos a guardarlo como un objeto:
```{r}
p1<-ggplot(
  asalariados.con.ingreso.y.horas.cordoba)+
  geom_point(aes(PP3E_TOT, PP08D1))+
  facet_grid(cantidad.ocupaciones~sexo)
```
 
Para que aparezca solo se lo llama:
```{r}
p1
```

El cambio en la posición de los ejes es `coord_flip`
```{r}
p1+coord_flip()
```


Ahora se pueden seguir agregando capas a p1. Los nombres de los ejes se ajustan con capas de etiquetas:
```{r}
p1+ xlab("Horas trabajadas")+
  ylab("Ingresos salariales")

```

La capa `labs` agrega un título, subtítulo y epígrafe.

```{r}
p1+ xlab("Horas trabajadas")+
  ylab("Ingresos salariales")+
  labs(title="Ingresos salariales según cantidad de horas semanales trabajadas", subtitle="clasificación por sexos y cantidad de ocupaciones",
       caption="Fuente: EPH tercer trimestre 2018")

```


La tipografía y combinación de colores puede elegirse de manera muy precisa con la capa `theme`, sin embargo, el paquete `ggthemes` tiene preformateados algunos como los que usan algunos medios (Wall Street Journal, The economist) o algunos programas muy conocidos (excel, stata). Para simplificar, llamemos p2 al gráfico que tenemos construido hasta ahora:
```{r}
p2<-p1+ xlab("Horas trabajadas")+
  ylab("Ingresos salariales")+
  labs(title="Ingresos salariales según cantidad de horas semanales trabajadas", subtitle="clasificación por sexos y cantidad de ocupaciones",
       caption="Fuente: EPH tercer trimestre 2018")
```

Y probemos alguna capas de temas, se instala y carga:
```{r}
install.packages("ggthemes")
library(ggthemes)
```

Wall Street Journal
```{r}
p2+theme_wsj()
```

The Economist
```{r}
p2+theme_economist()
```

Excel
```{r}
p2+theme_excel()
```

La propuesta de Edward Tufte
```{r}
p2+theme_tufte()
```

Para variables categóricas empezamos con un gráfico de barras:

```{r}
ggplot(asalariados.con.ingreso.y.horas.cordoba)+
  geom_bar(aes(sexo))
```

Ahora se separa por sexos, asignando
dos=uno+geom_histogram(aes(fill=ch04))
dos+coord_flip()
dos+scale_x_continuous(limits = c(200,20000))

tres=ggplot(eph215.1, aes(x=ch04, y=p47t))
tres+geom_boxplot()
tres+geom_boxplot(aes(fill=ch04))

eph215.1$sexo=eph215.1$ch04
levels(eph215.1$sexo)=c("varones", "mujeres")
eph215.1$ingreso=eph215.1$p47t

tres=ggplot(eph215.1, aes(x=sexo, y=ingreso))
tres+geom_boxplot()
tres+geom_boxplot(aes(fill=sexo))

###
cuatro=ggplot(eph215.1, aes(nivel_ed,ingreso))
cuatro+stat_summary(fun.y = mean,
                   fun.ymin=function(x) mean(x)-sd(x),
                   fun.ymax=function(x) mean(x)+sd(x),
                   geom="pointrange")

cuatro+stat_summary(fun.y = mean,
                    fun.ymin=function(x) mean(x)-sd(x)/sqrt(length(eph215.1$ingreso)),
                    fun.ymax=function(x) mean(x)+sd(x)/sqrt(length(eph215.1$ingreso)),
                    geom="pointrange")
##falla el orden de las categorias
eph215.1$educacion=as.character(eph215.1$nivel_ed)##la defino como caracter
table(eph215.1$educacion)##ahora el orden es alfabetico
eph215.1$educacion=factor(eph215.1$educacion, levels=c("Sin instrucción",
                                                       "Primaria Incompleta (incluye educación especial)",
                                                       "Primaria Completa","Secundaria Incompleta",
                                                       "Secundaria Completa","Superior Universitaria Incompleta",
                                                       "Superior Universitaria Completa"))
##con esto volimos  a factor, en el orden que quiero, a ver
cinco=ggplot(eph215.1, aes(educacion,ingreso))
cinco+stat_summary(fun.y = mean,
                    fun.ymin=function(x) mean(x)-sd(x),
                    fun.ymax=function(x) mean(x)+sd(x),
                    geom="pointrange")##great

seis=cinco+stat_summary(fun.y = mean,
                   fun.ymin=function(x) mean(x),
                   fun.ymax=function(x) mean(x),
                   geom="pointrange")

siete=seis+facet_grid(ch15~.)
siete
ocho=siete+
  theme_tufte()+
  theme(axis.text.x=element_text(angle = 60, vjust=1, size = 7,
                                 hjust =1 ))
ocho
levels(eph215.1$aglomerado)
cba=subset(eph215.1,aglomerado=="Gran Córdoba")

nueve=ggplot(cba, aes(educacion,ingreso))
nueve+stat_summary(fun.y = mean,
                   fun.ymin=function(x) mean(x)-sd(x),
                   fun.ymax=function(x) mean(x)+sd(x),
                   geom="pointrange")##great

diez=nueve+stat_summary(fun.y = mean,
                        fun.ymin=function(x) mean(x),
                        fun.ymax=function(x) mean(x),
                        geom="pointrange")

diez
once=diez+facet_grid(sexo~.)

once+
  theme_tufte()+
  theme(axis.text.x=element_text(angle = 60, vjust=1, size = 7,
                                 hjust =1 ))
##############3
aggregate(cba$ingreso,list(cba$educacion,cba$sexo),mean)##anda bien con dos criterios


##prueba desde formato dbf:
file.choose()
eph215.desdedbf=read.dbf("E:\\Documents and Settings\\parttimeucc\\Escritorio\\Individual_t215.dbf")
names(eph215.desdedbf)
class(eph215.desdedbf$NIVEL_ED)
summary(eph215.desdedbf$NIVEL_ED)
eph215.desdedbf$educaci?n=factor(eph215.desdedbf$NIVEL_ED,
                                 levels=c(7,1,2,3,4,5,6))
table(eph215.desdedbf$educaci?n)
levels(eph215.desdedbf$educaci?n)=c("no fue", "priinc", "pricom", "secinc",
                                    "seccom", "uniinc","unicomp")
###asi anda, pero es igual que desde spss